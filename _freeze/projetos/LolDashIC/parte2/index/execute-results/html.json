{
  "hash": "fc47ca1ffff5607bf1dce28cd0dccf80",
  "result": {
    "markdown": "---\nexecute: \n  eval: false\n---\n\n## Shiny Dashboard\n\nO Shiny é um framework em R que simplifica o desenvolvimento de aplicativos web, dispensando a necessidade de conhecimentos em HTML, CSS e JavaScript.\n\n### Estrutura\n\nO Shiny, possui uma arquitetura composta por duas partes principais: a interface do usuário (UI) e a lógica do servidor (server).\n\nPrimeiramente vamos carregar as bases que salvamos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"Matchs.RData\")\nload(\"Champions.RData\")\nload(\"Player.RData\")\n```\n:::\n\n\n## Código:\n\nO código deste Dashboard pode ser acessado no [Github](https://github.com/Peishino/I.C/blob/main/LOLDashBoard/app.R). Aqui, fornecerei explicações sobre algumas partes e funções cruciais. Caso deseje examinar o código completo, sinta-se à vontade para visitar o repositório. Além disso, estou aberto a sugestões de aprimoramento e feedback.\n\n\n## UI\nClaro, vou fornecer explicações mais didáticas focando nas funções utilizadas:\n\n### 1. Definição da Página do Dashboard\n```R\nui <- dashboardPage(\n  skin = \"black\",\n  dashboardHeader(title = \"League of Legends Worlds\"),\n  dashboardSidebar(\n    sidebarMenu(\n      menuItem(\"Jogadores\", tabName = \"dashboard1\", icon = icon(\"chart-line\")),\n      menuItem(\"Personagens\", tabName = \"dashboard2\", icon = icon(\"chart-bar\")),\n      menuItem(\"Partidas\", tabName = \"dashboard3\", icon = icon(\"chart-area\"))\n    )\n  ),\n  dashboardBody(\n    # Conteúdo do dashboard vai aqui\n  )\n)\n```\nNesta parte, estamos criando a estrutura principal do dashboard. `dashboardPage` define a página, `dashboardHeader` configura o cabeçalho, e `dashboardSidebar` especifica a barra lateral com itens do menu.\n\n### 2. Conteúdo da Aba \"Jogadores\"\n```R\ntabItem(\n  tabName = \"dashboard1\",\n  fluidRow(\n    # Conteúdo da primeira aba vai aqui\n  )\n)\n```\nAqui, definimos o conteúdo específico da aba \"Jogadores\". `tabItem` cria uma aba, e `fluidRow` organiza os elementos em uma linha fluida.\n\n### 3. Caixas de Informação e Gráficos da Aba \"Jogadores\"\n```R\nbox(width = 12, status = \"warning\", solidHeader = TRUE,\n    infoBoxOutput(\"Team\", width = 3),\n    infoBoxOutput(\"KDA\", width = 3),\n    infoBoxOutput(\"CreepScore\", width = 3),\n    infoBoxOutput(\"Damage\", width = 3)\n)\n```\nAqui, estamos criando uma caixa (`box`) que exibe informações (usando `infoBoxOutput`) sobre a equipe, KDA, Creep Score e Dano dos jogadores.\n\n```R\ncolumn(7,\n  box(width = 12, status = \"warning\", solidHeader = TRUE,\n      plotlyOutput(\"Wr_Season\")\n  ),\n  box(width = 12, status = \"warning\", solidHeader = TRUE,\n      plotlyOutput(\"gauge\")\n  )\n),\ncolumn(5,\n  # Conteúdo da coluna direita vai aqui\n)\n```\nEstamos dividindo a linha fluida em duas colunas (`column`). À esquerda, temos dois gráficos (`plotlyOutput`), como um gráfico de desempenho sazonal (Wr_Season) e um medidor (gauge).\n\n```R\nselectInput(\"Player\", \"Selecione o jogador\", choices =  NULL),\nselectInput(\"Season\", \"Filtrar por temporada\", choices = NULL),\nplotlyOutput(\"KDA_Season\", height = 642)\n```\nAqui, adicionamos elementos interativos para seleção de jogador (`selectInput`) e temporada, além de um gráfico de desempenho sazonal (KDA_Season).\n\nEssas são algumas explicações mais detalhadas, destacando funções e elementos específicos utilizados na construção do dashboard. Se houver mais partes específicas que você gostaria de entender melhor, fique à vontade para perguntar.\n## Server\n\n## Resultado\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}